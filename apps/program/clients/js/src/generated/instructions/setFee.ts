/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { FLOOR_SWAP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_FEE_DISCRIMINATOR = 2;

export function getSetFeeDiscriminatorBytes() {
  return getU8Encoder().encode(SET_FEE_DISCRIMINATOR);
}

export type SetFeeInstruction<
  TProgram extends string = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type SetFeeInstructionData = {
  discriminator: number;
  feeAmount: bigint;
};

export type SetFeeInstructionDataArgs = { feeAmount: number | bigint };

export function getSetFeeInstructionDataEncoder(): FixedSizeEncoder<SetFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['feeAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_FEE_DISCRIMINATOR })
  );
}

export function getSetFeeInstructionDataDecoder(): FixedSizeDecoder<SetFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['feeAmount', getU64Decoder()],
  ]);
}

export function getSetFeeInstructionDataCodec(): FixedSizeCodec<
  SetFeeInstructionDataArgs,
  SetFeeInstructionData
> {
  return combineCodec(
    getSetFeeInstructionDataEncoder(),
    getSetFeeInstructionDataDecoder()
  );
}

export type SetFeeInput<
  TAccountPool extends string = string,
  TAccountAuthority extends string = string,
> = {
  /** The program derived address of the Pool account (seeds: ['floor_swap', collection]) */
  pool: Address<TAccountPool>;
  /** The authority of the app */
  authority: TransactionSigner<TAccountAuthority>;
  feeAmount: SetFeeInstructionDataArgs['feeAmount'];
};

export function getSetFeeInstruction<
  TAccountPool extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
>(
  input: SetFeeInput<TAccountPool, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): SetFeeInstruction<TProgramAddress, TAccountPool, TAccountAuthority> {
  // Program address.
  const programAddress = config?.programAddress ?? FLOOR_SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.authority),
    ],
    data: getSetFeeInstructionDataEncoder().encode(
      args as SetFeeInstructionDataArgs
    ),
    programAddress,
  } as SetFeeInstruction<TProgramAddress, TAccountPool, TAccountAuthority>);
}

export type ParsedSetFeeInstruction<
  TProgram extends string = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The program derived address of the Pool account (seeds: ['floor_swap', collection]) */
    pool: TAccountMetas[0];
    /** The authority of the app */
    authority: TAccountMetas[1];
  };
  data: SetFeeInstructionData;
};

export function parseSetFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { pool: getNextAccount(), authority: getNextAccount() },
    data: getSetFeeInstructionDataDecoder().decode(instruction.data),
  };
}

/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateInstruction,
  type ParsedDepositInstruction,
  type ParsedSetActiveInstruction,
  type ParsedSetFeeInstruction,
  type ParsedSwapInstruction,
  type ParsedWithdrawInstruction,
} from '../instructions';
import { getKeyEncoder, Key } from '../types';

export const FLOOR_SWAP_PROGRAM_ADDRESS =
  'H8cyHcVnXenuL24BMcv4AdJrFgAGRKBTb1Tcx7hqZKTs' as Address<'H8cyHcVnXenuL24BMcv4AdJrFgAGRKBTb1Tcx7hqZKTs'>;

export enum FloorSwapAccount {
  Pool,
}

export function identifyFloorSwapAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): FloorSwapAccount {
  const data = 'data' in account ? account.data : account;
  if (containsBytes(data, getKeyEncoder().encode(Key.Pool), 0)) {
    return FloorSwapAccount.Pool;
  }
  throw new Error(
    'The provided account could not be identified as a floorSwap account.'
  );
}

export enum FloorSwapInstruction {
  Create,
  SetActive,
  SetFee,
  Swap,
  Deposit,
  Withdraw,
}

export function identifyFloorSwapInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): FloorSwapInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return FloorSwapInstruction.Create;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return FloorSwapInstruction.SetActive;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return FloorSwapInstruction.SetFee;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return FloorSwapInstruction.Swap;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return FloorSwapInstruction.Deposit;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return FloorSwapInstruction.Withdraw;
  }
  throw new Error(
    'The provided instruction could not be identified as a floorSwap instruction.'
  );
}

export type ParsedFloorSwapInstruction<
  TProgram extends string = 'H8cyHcVnXenuL24BMcv4AdJrFgAGRKBTb1Tcx7hqZKTs',
> =
  | ({
      instructionType: FloorSwapInstruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({
      instructionType: FloorSwapInstruction.SetActive;
    } & ParsedSetActiveInstruction<TProgram>)
  | ({
      instructionType: FloorSwapInstruction.SetFee;
    } & ParsedSetFeeInstruction<TProgram>)
  | ({
      instructionType: FloorSwapInstruction.Swap;
    } & ParsedSwapInstruction<TProgram>)
  | ({
      instructionType: FloorSwapInstruction.Deposit;
    } & ParsedDepositInstruction<TProgram>)
  | ({
      instructionType: FloorSwapInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>);

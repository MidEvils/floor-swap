//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

pub const DEPOSIT_DISCRIMINATOR: u8 = 4;

/// Accounts.
#[derive(Debug)]
pub struct Deposit {
    /// The PDA of the Pool account (seeds: ['floor_swap', collection])
    pub pool: solana_pubkey::Pubkey,
    /// The mpl-core asset to deposit
    pub asset: solana_pubkey::Pubkey,
    /// The collection of the asset
    pub collection: solana_pubkey::Pubkey,
    /// The user depositing the asset
    pub payer: solana_pubkey::Pubkey,
    /// The MPL Core program
    pub core_program: solana_pubkey::Pubkey,
}

impl Deposit {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.pool, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.asset, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.collection,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.payer, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.core_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = DepositInstructionData::new().try_to_vec().unwrap();

        solana_instruction::Instruction {
            program_id: crate::FLOOR_SWAP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositInstructionData {
    discriminator: u8,
}

impl DepositInstructionData {
    pub fn new() -> Self {
        Self { discriminator: 4 }
    }

    pub(crate) fn try_to_vec(&self) -> Result<Vec<u8>, std::io::Error> {
        borsh::to_vec(self)
    }
}

impl Default for DepositInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `Deposit`.
///
/// ### Accounts:
///
///   0. `[]` pool
///   1. `[writable]` asset
///   2. `[]` collection
///   3. `[signer]` payer
///   4. `[]` core_program
#[derive(Clone, Debug, Default)]
pub struct DepositBuilder {
    pool: Option<solana_pubkey::Pubkey>,
    asset: Option<solana_pubkey::Pubkey>,
    collection: Option<solana_pubkey::Pubkey>,
    payer: Option<solana_pubkey::Pubkey>,
    core_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl DepositBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The PDA of the Pool account (seeds: ['floor_swap', collection])
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }
    /// The mpl-core asset to deposit
    #[inline(always)]
    pub fn asset(&mut self, asset: solana_pubkey::Pubkey) -> &mut Self {
        self.asset = Some(asset);
        self
    }
    /// The collection of the asset
    #[inline(always)]
    pub fn collection(&mut self, collection: solana_pubkey::Pubkey) -> &mut Self {
        self.collection = Some(collection);
        self
    }
    /// The user depositing the asset
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    /// The MPL Core program
    #[inline(always)]
    pub fn core_program(&mut self, core_program: solana_pubkey::Pubkey) -> &mut Self {
        self.core_program = Some(core_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = Deposit {
            pool: self.pool.expect("pool is not set"),
            asset: self.asset.expect("asset is not set"),
            collection: self.collection.expect("collection is not set"),
            payer: self.payer.expect("payer is not set"),
            core_program: self.core_program.expect("core_program is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `deposit` CPI accounts.
pub struct DepositCpiAccounts<'a, 'b> {
    /// The PDA of the Pool account (seeds: ['floor_swap', collection])
    pub pool: &'b solana_account_info::AccountInfo<'a>,
    /// The mpl-core asset to deposit
    pub asset: &'b solana_account_info::AccountInfo<'a>,
    /// The collection of the asset
    pub collection: &'b solana_account_info::AccountInfo<'a>,
    /// The user depositing the asset
    pub payer: &'b solana_account_info::AccountInfo<'a>,
    /// The MPL Core program
    pub core_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `deposit` CPI instruction.
pub struct DepositCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// The PDA of the Pool account (seeds: ['floor_swap', collection])
    pub pool: &'b solana_account_info::AccountInfo<'a>,
    /// The mpl-core asset to deposit
    pub asset: &'b solana_account_info::AccountInfo<'a>,
    /// The collection of the asset
    pub collection: &'b solana_account_info::AccountInfo<'a>,
    /// The user depositing the asset
    pub payer: &'b solana_account_info::AccountInfo<'a>,
    /// The MPL Core program
    pub core_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> DepositCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: DepositCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            pool: accounts.pool,
            asset: accounts.asset,
            collection: accounts.collection,
            payer: accounts.payer,
            core_program: accounts.core_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.asset.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.collection.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.core_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = DepositInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::FLOOR_SWAP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.asset.clone());
        account_infos.push(self.collection.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.core_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Deposit` via CPI.
///
/// ### Accounts:
///
///   0. `[]` pool
///   1. `[writable]` asset
///   2. `[]` collection
///   3. `[signer]` payer
///   4. `[]` core_program
#[derive(Clone, Debug)]
pub struct DepositCpiBuilder<'a, 'b> {
    instruction: Box<DepositCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DepositCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(DepositCpiBuilderInstruction {
            __program: program,
            pool: None,
            asset: None,
            collection: None,
            payer: None,
            core_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The PDA of the Pool account (seeds: ['floor_swap', collection])
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }
    /// The mpl-core asset to deposit
    #[inline(always)]
    pub fn asset(&mut self, asset: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.asset = Some(asset);
        self
    }
    /// The collection of the asset
    #[inline(always)]
    pub fn collection(
        &mut self,
        collection: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collection = Some(collection);
        self
    }
    /// The user depositing the asset
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    /// The MPL Core program
    #[inline(always)]
    pub fn core_program(
        &mut self,
        core_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.core_program = Some(core_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = DepositCpi {
            __program: self.instruction.__program,

            pool: self.instruction.pool.expect("pool is not set"),

            asset: self.instruction.asset.expect("asset is not set"),

            collection: self.instruction.collection.expect("collection is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            core_program: self
                .instruction
                .core_program
                .expect("core_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct DepositCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    pool: Option<&'b solana_account_info::AccountInfo<'a>>,
    asset: Option<&'b solana_account_info::AccountInfo<'a>>,
    collection: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    core_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

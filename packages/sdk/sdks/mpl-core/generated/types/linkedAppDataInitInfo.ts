/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  getAuthorityDecoder,
  getAuthorityEncoder,
  getExternalPluginAdapterSchemaDecoder,
  getExternalPluginAdapterSchemaEncoder,
  type Authority,
  type AuthorityArgs,
  type ExternalPluginAdapterSchema,
  type ExternalPluginAdapterSchemaArgs,
} from '.';

export type LinkedAppDataInitInfo = {
  dataAuthority: Authority;
  initPluginAuthority: Option<Authority>;
  schema: Option<ExternalPluginAdapterSchema>;
};

export type LinkedAppDataInitInfoArgs = {
  dataAuthority: AuthorityArgs;
  initPluginAuthority: OptionOrNullable<AuthorityArgs>;
  schema: OptionOrNullable<ExternalPluginAdapterSchemaArgs>;
};

export function getLinkedAppDataInitInfoEncoder(): Encoder<LinkedAppDataInitInfoArgs> {
  return getStructEncoder([
    ['dataAuthority', getAuthorityEncoder()],
    ['initPluginAuthority', getOptionEncoder(getAuthorityEncoder())],
    ['schema', getOptionEncoder(getExternalPluginAdapterSchemaEncoder())],
  ]);
}

export function getLinkedAppDataInitInfoDecoder(): Decoder<LinkedAppDataInitInfo> {
  return getStructDecoder([
    ['dataAuthority', getAuthorityDecoder()],
    ['initPluginAuthority', getOptionDecoder(getAuthorityDecoder())],
    ['schema', getOptionDecoder(getExternalPluginAdapterSchemaDecoder())],
  ]);
}

export function getLinkedAppDataInitInfoCodec(): Codec<
  LinkedAppDataInitInfoArgs,
  LinkedAppDataInitInfo
> {
  return combineCodec(
    getLinkedAppDataInitInfoEncoder(),
    getLinkedAppDataInitInfoDecoder()
  );
}

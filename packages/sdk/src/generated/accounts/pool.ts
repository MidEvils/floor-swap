/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import { findPoolPda, PoolSeeds } from '../pdas';
import { getKeyDecoder, getKeyEncoder, Key } from '../types';

export const POOL_KEY = Key.Pool;

export function getPoolKeyBytes() {
  return getKeyEncoder().encode(POOL_KEY);
}

export type Pool = {
  key: Key;
  collection: Address;
  authority: Address;
  treasury: Address;
  feeAmount: bigint;
  enabled: boolean;
  numAssets: number;
};

export type PoolArgs = {
  collection: Address;
  authority: Address;
  treasury: Address;
  feeAmount: number | bigint;
  enabled: boolean;
  numAssets: number;
};

export function getPoolEncoder(): FixedSizeEncoder<PoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ['key', getKeyEncoder()],
      ['collection', getAddressEncoder()],
      ['authority', getAddressEncoder()],
      ['treasury', getAddressEncoder()],
      ['feeAmount', getU64Encoder()],
      ['enabled', getBooleanEncoder()],
      ['numAssets', getU16Encoder()],
    ]),
    (value) => ({ ...value, key: POOL_KEY })
  );
}

export function getPoolDecoder(): FixedSizeDecoder<Pool> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['collection', getAddressDecoder()],
    ['authority', getAddressDecoder()],
    ['treasury', getAddressDecoder()],
    ['feeAmount', getU64Decoder()],
    ['enabled', getBooleanDecoder()],
    ['numAssets', getU16Decoder()],
  ]);
}

export function getPoolCodec(): FixedSizeCodec<PoolArgs, Pool> {
  return combineCodec(getPoolEncoder(), getPoolDecoder());
}

export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Pool, TAddress>;
export function decodePool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Pool, TAddress>;
export function decodePool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Pool, TAddress> | MaybeAccount<Pool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPoolDecoder()
  );
}

export async function fetchPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Pool, TAddress>> {
  const maybeAccount = await fetchMaybePool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Pool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePool(maybeAccount);
}

export async function fetchAllPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Pool>[]> {
  const maybeAccounts = await fetchAllMaybePool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Pool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePool(maybeAccount));
}

export function getPoolSize(): number {
  return 108;
}

export async function fetchPoolFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: PoolSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<Pool>> {
  const maybeAccount = await fetchMaybePoolFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePoolFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: PoolSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<Pool>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findPoolPda(seeds, { programAddress });
  return await fetchMaybePool(rpc, address, fetchConfig);
}

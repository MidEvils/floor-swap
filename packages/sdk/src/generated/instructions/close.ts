/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { FLOOR_SWAP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_DISCRIMINATOR = 6;

export function getCloseDiscriminatorBytes() {
  return getU8Encoder().encode(CLOSE_DISCRIMINATOR);
}

export type CloseInstruction<
  TProgram extends string = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseInstructionData = { discriminator: number };

export type CloseInstructionDataArgs = {};

export function getCloseInstructionDataEncoder(): FixedSizeEncoder<CloseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: CLOSE_DISCRIMINATOR })
  );
}

export function getCloseInstructionDataDecoder(): FixedSizeDecoder<CloseInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getCloseInstructionDataCodec(): FixedSizeCodec<
  CloseInstructionDataArgs,
  CloseInstructionData
> {
  return combineCodec(
    getCloseInstructionDataEncoder(),
    getCloseInstructionDataDecoder()
  );
}

export type CloseInput<
  TAccountPool extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The PDA of the Pool account (seeds: ['floor_swap', authority, collection]) */
  pool: Address<TAccountPool>;
  /** The authority of the pool */
  authority: TransactionSigner<TAccountAuthority>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCloseInstruction<
  TAccountPool extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
>(
  input: CloseInput<TAccountPool, TAccountAuthority, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress }
): CloseInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? FLOOR_SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCloseInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountAuthority,
    TAccountSystemProgram
  >);
}

export type ParsedCloseInstruction<
  TProgram extends string = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The PDA of the Pool account (seeds: ['floor_swap', authority, collection]) */
    pool: TAccountMetas[0];
    /** The authority of the pool */
    authority: TAccountMetas[1];
    /** The system program */
    systemProgram: TAccountMetas[2];
  };
  data: CloseInstructionData;
};

export function parseCloseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCloseInstructionDataDecoder().decode(instruction.data),
  };
}

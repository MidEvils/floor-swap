/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  BASE_ACCOUNT_SIZE,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { getPoolSize } from '../accounts';
import { findPoolPda } from '../pdas';
import { FLOOR_SWAP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type InstructionWithByteDelta,
  type ResolvedAccount,
} from '../shared';

export const CREATE_DISCRIMINATOR = 0;

export function getCreateDiscriminatorBytes() {
  return getU8Encoder().encode(CREATE_DISCRIMINATOR);
}

export type CreateInstruction<
  TProgram extends string = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountCollection extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountCollection extends string
        ? ReadonlyAccount<TAccountCollection>
        : TAccountCollection,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTreasury extends string
        ? ReadonlyAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateInstructionData = {
  discriminator: number;
  feeAmount: bigint;
};

export type CreateInstructionDataArgs = { feeAmount: number | bigint };

export function getCreateInstructionDataEncoder(): FixedSizeEncoder<CreateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['feeAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_DISCRIMINATOR })
  );
}

export function getCreateInstructionDataDecoder(): FixedSizeDecoder<CreateInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['feeAmount', getU64Decoder()],
  ]);
}

export function getCreateInstructionDataCodec(): FixedSizeCodec<
  CreateInstructionDataArgs,
  CreateInstructionData
> {
  return combineCodec(
    getCreateInstructionDataEncoder(),
    getCreateInstructionDataDecoder()
  );
}

export type CreateAsyncInput<
  TAccountPool extends string = string,
  TAccountCollection extends string = string,
  TAccountAuthority extends string = string,
  TAccountTreasury extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The program derived address of the Pool account to create (seeds: ['floor_swap', collection]) */
  pool?: Address<TAccountPool>;
  /** The mpl-core collection */
  collection: Address<TAccountCollection>;
  /** The authority of the pool */
  authority: TransactionSigner<TAccountAuthority>;
  /** The treasury where fees are sent */
  treasury: Address<TAccountTreasury>;
  /** The account paying for the storage fees */
  payer?: TransactionSigner<TAccountPayer>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  feeAmount: CreateInstructionDataArgs['feeAmount'];
};

export async function getCreateInstructionAsync<
  TAccountPool extends string,
  TAccountCollection extends string,
  TAccountAuthority extends string,
  TAccountTreasury extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
>(
  input: CreateAsyncInput<
    TAccountPool,
    TAccountCollection,
    TAccountAuthority,
    TAccountTreasury,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountCollection,
    TAccountAuthority,
    TAccountTreasury,
    TAccountPayer,
    TAccountSystemProgram
  > &
    InstructionWithByteDelta
> {
  // Program address.
  const programAddress = config?.programAddress ?? FLOOR_SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    treasury: { value: input.treasury ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.pool.value) {
    accounts.pool.value = await findPoolPda({
      authority: expectAddress(accounts.authority.value),
      collection: expectAddress(accounts.collection.value),
    });
  }
  if (!accounts.payer.value) {
    accounts.payer.value = expectSome(accounts.authority.value);
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Bytes created or reallocated by the instruction.
  const byteDelta: number = [getPoolSize() + BASE_ACCOUNT_SIZE].reduce(
    (a, b) => a + b,
    0
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    byteDelta,
    data: getCreateInstructionDataEncoder().encode(
      args as CreateInstructionDataArgs
    ),
    programAddress,
  } as CreateInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountCollection,
    TAccountAuthority,
    TAccountTreasury,
    TAccountPayer,
    TAccountSystemProgram
  > &
    InstructionWithByteDelta);
}

export type CreateInput<
  TAccountPool extends string = string,
  TAccountCollection extends string = string,
  TAccountAuthority extends string = string,
  TAccountTreasury extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The program derived address of the Pool account to create (seeds: ['floor_swap', collection]) */
  pool: Address<TAccountPool>;
  /** The mpl-core collection */
  collection: Address<TAccountCollection>;
  /** The authority of the pool */
  authority: TransactionSigner<TAccountAuthority>;
  /** The treasury where fees are sent */
  treasury: Address<TAccountTreasury>;
  /** The account paying for the storage fees */
  payer?: TransactionSigner<TAccountPayer>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  feeAmount: CreateInstructionDataArgs['feeAmount'];
};

export function getCreateInstruction<
  TAccountPool extends string,
  TAccountCollection extends string,
  TAccountAuthority extends string,
  TAccountTreasury extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
>(
  input: CreateInput<
    TAccountPool,
    TAccountCollection,
    TAccountAuthority,
    TAccountTreasury,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountCollection,
  TAccountAuthority,
  TAccountTreasury,
  TAccountPayer,
  TAccountSystemProgram
> &
  InstructionWithByteDelta {
  // Program address.
  const programAddress = config?.programAddress ?? FLOOR_SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    treasury: { value: input.treasury ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.payer.value) {
    accounts.payer.value = expectSome(accounts.authority.value);
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Bytes created or reallocated by the instruction.
  const byteDelta: number = [getPoolSize() + BASE_ACCOUNT_SIZE].reduce(
    (a, b) => a + b,
    0
  );

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    byteDelta,
    data: getCreateInstructionDataEncoder().encode(
      args as CreateInstructionDataArgs
    ),
    programAddress,
  } as CreateInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountCollection,
    TAccountAuthority,
    TAccountTreasury,
    TAccountPayer,
    TAccountSystemProgram
  > &
    InstructionWithByteDelta);
}

export type ParsedCreateInstruction<
  TProgram extends string = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The program derived address of the Pool account to create (seeds: ['floor_swap', collection]) */
    pool: TAccountMetas[0];
    /** The mpl-core collection */
    collection: TAccountMetas[1];
    /** The authority of the pool */
    authority: TAccountMetas[2];
    /** The treasury where fees are sent */
    treasury: TAccountMetas[3];
    /** The account paying for the storage fees */
    payer: TAccountMetas[4];
    /** The system program */
    systemProgram: TAccountMetas[5];
  };
  data: CreateInstructionData;
};

export function parseCreateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      collection: getNextAccount(),
      authority: getNextAccount(),
      treasury: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateInstructionDataDecoder().decode(instruction.data),
  };
}

/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { FLOOR_SWAP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SWAP_DISCRIMINATOR = 3;

export function getSwapDiscriminatorBytes() {
  return getU8Encoder().encode(SWAP_DISCRIMINATOR);
}

export type SwapInstruction<
  TProgram extends string = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountSourceAsset extends string | AccountMeta<string> = string,
  TAccountDestAsset extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountCollection extends string | AccountMeta<string> = string,
  TAccountCoreProgram extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountSourceAsset extends string
        ? WritableAccount<TAccountSourceAsset>
        : TAccountSourceAsset,
      TAccountDestAsset extends string
        ? WritableAccount<TAccountDestAsset>
        : TAccountDestAsset,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountCollection extends string
        ? ReadonlyAccount<TAccountCollection>
        : TAccountCollection,
      TAccountCoreProgram extends string
        ? ReadonlyAccount<TAccountCoreProgram>
        : TAccountCoreProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SwapInstructionData = { discriminator: number };

export type SwapInstructionDataArgs = {};

export function getSwapInstructionDataEncoder(): FixedSizeEncoder<SwapInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: SWAP_DISCRIMINATOR })
  );
}

export function getSwapInstructionDataDecoder(): FixedSizeDecoder<SwapInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getSwapInstructionDataCodec(): FixedSizeCodec<
  SwapInstructionDataArgs,
  SwapInstructionData
> {
  return combineCodec(
    getSwapInstructionDataEncoder(),
    getSwapInstructionDataDecoder()
  );
}

export type SwapInput<
  TAccountPool extends string = string,
  TAccountSourceAsset extends string = string,
  TAccountDestAsset extends string = string,
  TAccountPayer extends string = string,
  TAccountTreasury extends string = string,
  TAccountCollection extends string = string,
  TAccountCoreProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The program derived address of the Pool account to toggle (seeds: ['floor_swap', collection]) */
  pool: Address<TAccountPool>;
  /** The mpl asset to send to the protocol */
  sourceAsset: Address<TAccountSourceAsset>;
  /** The mpl asset to receive from the protocol */
  destAsset: Address<TAccountDestAsset>;
  /** The user performing the swap */
  payer: TransactionSigner<TAccountPayer>;
  /** The treasury where fees are sent */
  treasury: Address<TAccountTreasury>;
  /** The collection of the pool */
  collection: Address<TAccountCollection>;
  /** The MPL Core program */
  coreProgram: Address<TAccountCoreProgram>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getSwapInstruction<
  TAccountPool extends string,
  TAccountSourceAsset extends string,
  TAccountDestAsset extends string,
  TAccountPayer extends string,
  TAccountTreasury extends string,
  TAccountCollection extends string,
  TAccountCoreProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
>(
  input: SwapInput<
    TAccountPool,
    TAccountSourceAsset,
    TAccountDestAsset,
    TAccountPayer,
    TAccountTreasury,
    TAccountCollection,
    TAccountCoreProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SwapInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountSourceAsset,
  TAccountDestAsset,
  TAccountPayer,
  TAccountTreasury,
  TAccountCollection,
  TAccountCoreProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? FLOOR_SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: false },
    sourceAsset: { value: input.sourceAsset ?? null, isWritable: true },
    destAsset: { value: input.destAsset ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: false },
    coreProgram: { value: input.coreProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.sourceAsset),
      getAccountMeta(accounts.destAsset),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.coreProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getSwapInstructionDataEncoder().encode({}),
    programAddress,
  } as SwapInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountSourceAsset,
    TAccountDestAsset,
    TAccountPayer,
    TAccountTreasury,
    TAccountCollection,
    TAccountCoreProgram,
    TAccountSystemProgram
  >);
}

export type ParsedSwapInstruction<
  TProgram extends string = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The program derived address of the Pool account to toggle (seeds: ['floor_swap', collection]) */
    pool: TAccountMetas[0];
    /** The mpl asset to send to the protocol */
    sourceAsset: TAccountMetas[1];
    /** The mpl asset to receive from the protocol */
    destAsset: TAccountMetas[2];
    /** The user performing the swap */
    payer: TAccountMetas[3];
    /** The treasury where fees are sent */
    treasury: TAccountMetas[4];
    /** The collection of the pool */
    collection: TAccountMetas[5];
    /** The MPL Core program */
    coreProgram: TAccountMetas[6];
    /** The system program */
    systemProgram: TAccountMetas[7];
  };
  data: SwapInstructionData;
};

export function parseSwapInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSwapInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      sourceAsset: getNextAccount(),
      destAsset: getNextAccount(),
      payer: getNextAccount(),
      treasury: getNextAccount(),
      collection: getNextAccount(),
      coreProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSwapInstructionDataDecoder().decode(instruction.data),
  };
}

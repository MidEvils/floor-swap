/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { FLOOR_SWAP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_DISCRIMINATOR = 5;

export function getWithdrawDiscriminatorBytes() {
  return getU8Encoder().encode(WITHDRAW_DISCRIMINATOR);
}

export type WithdrawInstruction<
  TProgram extends string = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
  TAccountPool extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountAsset extends string | AccountMeta<string> = string,
  TAccountCollection extends string | AccountMeta<string> = string,
  TAccountDestination extends string | AccountMeta<string> = string,
  TAccountCoreProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPool extends string
        ? ReadonlyAccount<TAccountPool>
        : TAccountPool,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountAsset extends string
        ? WritableAccount<TAccountAsset>
        : TAccountAsset,
      TAccountCollection extends string
        ? ReadonlyAccount<TAccountCollection>
        : TAccountCollection,
      TAccountDestination extends string
        ? ReadonlyAccount<TAccountDestination>
        : TAccountDestination,
      TAccountCoreProgram extends string
        ? ReadonlyAccount<TAccountCoreProgram>
        : TAccountCoreProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawInstructionData = { discriminator: number };

export type WithdrawInstructionDataArgs = {};

export function getWithdrawInstructionDataEncoder(): FixedSizeEncoder<WithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: WITHDRAW_DISCRIMINATOR })
  );
}

export function getWithdrawInstructionDataDecoder(): FixedSizeDecoder<WithdrawInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getWithdrawInstructionDataCodec(): FixedSizeCodec<
  WithdrawInstructionDataArgs,
  WithdrawInstructionData
> {
  return combineCodec(
    getWithdrawInstructionDataEncoder(),
    getWithdrawInstructionDataDecoder()
  );
}

export type WithdrawInput<
  TAccountPool extends string = string,
  TAccountAuthority extends string = string,
  TAccountAsset extends string = string,
  TAccountCollection extends string = string,
  TAccountDestination extends string = string,
  TAccountCoreProgram extends string = string,
> = {
  /** The PDA of the Pool account (seeds: ['floor_swap', collection]) */
  pool: Address<TAccountPool>;
  /** The authority of the pool */
  authority: TransactionSigner<TAccountAuthority>;
  /** The mpl-core asset to deposit */
  asset: Address<TAccountAsset>;
  /** The collection of the asset */
  collection: Address<TAccountCollection>;
  /** The wallet to receive the asset */
  destination?: Address<TAccountDestination>;
  /** The MPL Core program */
  coreProgram: Address<TAccountCoreProgram>;
};

export function getWithdrawInstruction<
  TAccountPool extends string,
  TAccountAuthority extends string,
  TAccountAsset extends string,
  TAccountCollection extends string,
  TAccountDestination extends string,
  TAccountCoreProgram extends string,
  TProgramAddress extends Address = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
>(
  input: WithdrawInput<
    TAccountPool,
    TAccountAuthority,
    TAccountAsset,
    TAccountCollection,
    TAccountDestination,
    TAccountCoreProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawInstruction<
  TProgramAddress,
  TAccountPool,
  TAccountAuthority,
  TAccountAsset,
  TAccountCollection,
  TAccountDestination,
  TAccountCoreProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? FLOOR_SWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pool: { value: input.pool ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    asset: { value: input.asset ?? null, isWritable: true },
    collection: { value: input.collection ?? null, isWritable: false },
    destination: { value: input.destination ?? null, isWritable: false },
    coreProgram: { value: input.coreProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.asset),
      getAccountMeta(accounts.collection),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.coreProgram),
    ],
    data: getWithdrawInstructionDataEncoder().encode({}),
    programAddress,
  } as WithdrawInstruction<
    TProgramAddress,
    TAccountPool,
    TAccountAuthority,
    TAccountAsset,
    TAccountCollection,
    TAccountDestination,
    TAccountCoreProgram
  >);
}

export type ParsedWithdrawInstruction<
  TProgram extends string = typeof FLOOR_SWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The PDA of the Pool account (seeds: ['floor_swap', collection]) */
    pool: TAccountMetas[0];
    /** The authority of the pool */
    authority: TAccountMetas[1];
    /** The mpl-core asset to deposit */
    asset: TAccountMetas[2];
    /** The collection of the asset */
    collection: TAccountMetas[3];
    /** The wallet to receive the asset */
    destination?: TAccountMetas[4] | undefined;
    /** The MPL Core program */
    coreProgram: TAccountMetas[5];
  };
  data: WithdrawInstructionData;
};

export function parseWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === FLOOR_SWAP_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pool: getNextAccount(),
      authority: getNextAccount(),
      asset: getNextAccount(),
      collection: getNextAccount(),
      destination: getNextOptionalAccount(),
      coreProgram: getNextAccount(),
    },
    data: getWithdrawInstructionDataDecoder().decode(instruction.data),
  };
}
